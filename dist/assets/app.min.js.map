{"version":3,"sources":["app.js"],"names":["exceptions","$","ajax","url","type","dataType","then","angular","element","document","ready","bootstrap","write","module","config","$locationProvider","html5Mode","hashPrefix","factory","$log","$window","$injector","getSourceMappedStackTrace","exception","$q","get","$http","SMConsumer","window","sourceMap","SourceMapConsumer","cache","getMapForScript","promise","response","m","data","match","path","reject","stack","all","_","map","split","stackLine","prefix","line","col","pos","originalPositionFor","parseInt","column","mangledName","name","location","origin","source","when","lines","join","indexOf","error"],"mappings":"AAAA,YACA,IAAAA,YAAA,CAEAC,GAAAC,MACAC,IAAA,qBACAC,KAAA,MACAC,SAAA,SACAC,KAAA,WACAC,QAAAC,QAAAC,UAAAC,MAAA,WACAH,QAAAI,UAAAF,UAAA,WAEA,WACAA,SAAAG,MAAA,uCAIAL,QAAAM,OAAA,OAEA,UACA,WAEA,YACA,UACA,eAGAC,QAAA,oBACA,SAAAC,GACAA,EAAAC,WAAA,GAAAC,WAAA,QAKAC,QAAA,qBAAA,OAAA,UAAA,YACA,SAAAC,EAAAC,EAAAC,GAEA,GAAAC,GAAA,SAAAC,GAIA,GAFAvB,YAAA,EAEAA,WAAA,GACA,KAAA,SAKA,IAAAwB,GAAAH,EAAAI,IAAA,MACAC,EAAAL,EAAAI,IAAA,SACAE,EAAAC,OAAAC,UAAAC,kBACAC,KAGAC,EAAA,SAAA7B,GACA,GAAA4B,EAAA5B,GACA,MAAA4B,GAAA5B,EAEA,IAAA8B,GAAAP,EAAAD,IAAAtB,GAAAG,KAAA,SAAA4B,GACA,GAAAC,GAAAD,EAAAE,KAAAC,MAAA,mCACA,IAAAF,EAAA,CACA,GAAAG,GAAAnC,EAAAkC,MAAA,gBAEA,OADAC,GAAAA,GAAAA,EAAA,GACAZ,EAAAD,IAAAa,EAAA,IAAAH,EAAA,IAAA7B,KAAA,SAAA4B,GACA,MAAA,IAAAP,GAAAO,EAAAE,QAGA,MAAAZ,GAAAe,UAIA,OADAR,GAAA5B,GAAA8B,EACAA,EAIA,OAAAV,GAAAiB,MACAhB,EAAAiB,IAAAC,EAAAC,IAAApB,EAAAiB,MAAAI,MAAA,MAAA,SAAAC,GACA,GAAAR,GAAAQ,EAAAR,MAAA,4BACA,IAAAA,EAAA,CACA,GAAAS,GAAAT,EAAA,GAAAlC,EAAAkC,EAAA,GAAAU,EAAAV,EAAA,GAAAW,EAAAX,EAAA,EACA,OAAAL,GAAA7B,GAAAG,KAAA,SAAAqC,GACA,GAAAM,GAAAN,EAAAO,qBACAH,KAAAI,SAAAJ,EAAA,IACAK,OAAAD,SAAAH,EAAA,MAEAK,EAAAP,EAAAT,MAAA,4BAEA,OADAgB,GAAAA,GAAAA,EAAA,IAAA,GACA,WAAAJ,EAAAK,KAAAL,EAAAK,KAAAD,GAAA,IACAjC,EAAAmC,SAAAC,OAAAP,EAAAQ,OAAA,IAAAR,EAAAF,KAAA,IACAE,EAAAG,QACA,WACA,MAAAP,KAGA,MAAArB,GAAAkC,KAAAb,MAEAvC,KAAA,SAAAqD,GACA,MAAAA,GAAAC,KAAA,QAGApC,EAAAkC,KAAA,IAIA,OAAA,UAAAnC,GACAA,EAAAiB,MAAAqB,QAAA,sBAAA,GAGAvC,EAAAC,GAAAjB,KAAAa,EAAA2C","file":"app.min.js","sourcesContent":["'use strict';\nvar exceptions = 0;\n// CONFIGURATION\n$.ajax({\n    url: 'configuration.json',\n    type: 'get',\n    dataType: 'json'\n}).then(function(data) {\n    angular.element(document).ready(function() {\n        angular.bootstrap(document, ['app']);\n    });\n}, function() {\n    document.write(\"Could not read configuration file\");\n});\n\n// BOOT MODULE\nangular.module('app', [\n    /* [BEGIN INJECT: MODULES] */\n    'app.api',\n    'app.core',\n    /* [END INJECT: MODULES] */\n    'ngAnimate',\n    'ngRoute',\n    'ngResource'\n])\n\n.config(['$locationProvider',\n    function($locationProvider) {\n        $locationProvider.html5Mode(true).hashPrefix('!');\n    }\n])\n\n\n.factory('$exceptionHandler', ['$log', '$window', '$injector',\n    function($log, $window, $injector) {\n\n      var getSourceMappedStackTrace = function(exception) {\n\n        exceptions = exceptions + 1;\n\n        if (exceptions > 20) {\n            throw (\"SHIT!!!\");\n            return;\n        }\n\n\n        var $q = $injector.get('$q'),\n            $http = $injector.get('$http'),\n            SMConsumer = window.sourceMap.SourceMapConsumer,\n            cache = {};\n\n        // Retrieve a SourceMap object for a minified script URL\n        var getMapForScript = function(url) {\n          if (cache[url]) {\n            return cache[url];\n          } else {\n            var promise = $http.get(url).then(function(response) {\n              var m = response.data.match(/\\/\\/# sourceMappingURL=(.+\\.map)/);\n              if (m) {\n                var path = url.match(/^(.+)\\/[^/]+$/);\n                path = path && path[1];\n                return $http.get(path + '/' + m[1]).then(function(response) {\n                  return new SMConsumer(response.data);\n                });\n              } else {\n                return $q.reject();\n              }\n            });\n            cache[url] = promise;\n            return promise;\n          }\n        };\n\n        if (exception.stack) { // not all browsers support stack traces\n          return $q.all(_.map(exception.stack.split(/\\n/), function(stackLine) {\n            var match = stackLine.match(/^(.+)(http.+):(\\d+):(\\d+)/);\n            if (match) {\n              var prefix = match[1], url = match[2], line = match[3], col = match[4];\n              return getMapForScript(url).then(function(map) {\n                var pos = map.originalPositionFor({\n                  line: parseInt(line, 10), \n                  column: parseInt(col, 10)\n                });\n                var mangledName = prefix.match(/\\s*(at)?\\s*(.*?)\\s*(\\(|@)/);\n                mangledName = (mangledName && mangledName[2]) || '';\n                return '    at ' + (pos.name ? pos.name : mangledName) + ' ' + \n                  $window.location.origin + pos.source + ':' + pos.line + ':' + \n                  pos.column;\n              }, function() {\n                return stackLine;\n              });\n            } else {\n              return $q.when(stackLine);\n            }\n          })).then(function (lines) {\n            return lines.join('\\n');\n          });\n        } else {\n          return $q.when('');\n        }\n      };\n\n      return function(exception) {\n        if (exception.stack.indexOf('source-map.min.js') >- 0) {\n            return;\n        } else {\n            getSourceMappedStackTrace(exception).then($log.error);\n        }\n      };\n    }]);\n\n"],"sourceRoot":"/src/"}